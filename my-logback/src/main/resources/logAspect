package com.tangtang.systemtemplate.aop.requestlogaspect;

import cn.hutool.json.JSONUtil;
import com.alibaba.fastjson.JSONObject;
import com.google.common.collect.Maps;
import com.tangtang.systemtemplate.requestLog.entity.RequestInfoLog;
import com.tangtang.systemtemplate.util.HttpServletRequestUtil;
import com.tangtang.systemtemplate.util.SpringContextUtil;
import org.apache.commons.lang3.ObjectUtils;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.Signature;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.core.LocalVariableTableParameterNameDiscoverer;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import java.lang.reflect.Method;
import java.time.LocalDateTime;
import java.util.Date;
import java.util.Map;
import java.util.Optional;

/**
 * description: 请求日志切面类
 *
 * @author charles.zhou
 * @date 2021-05-24 11:18:35
 */
@Component
@Aspect
public class RequestLogAspect {

    @Pointcut("@annotation(httpRequestLog)")
    public void requestLogAspect(HttpRequestLog httpRequestLog) {

    }

    @Around(value = "requestLogAspect(httpRequestLog)", argNames = "proceedingJoinPoint,httpRequestLog")
    public Object around(ProceedingJoinPoint proceedingJoinPoint, HttpRequestLog httpRequestLog) throws Throwable {
        String businessType = httpRequestLog.value();
        Object result = proceedingJoinPoint.proceed();
        RequestInfoLog requestInfoLog = buildRequestInfoLog(proceedingJoinPoint, businessType, result);
        SpringContextUtil.getApplicationContext().publishEvent(new RequestLogEvent(requestInfoLog));
        return result;
    }


    /**
     * 构建请求日志
     *
     * @param proceedingJoinPoint 切入点
     * @param businessType        业务类型
     * @param result              执行结果
     * @return RequestInfoLog
     */
    public RequestInfoLog buildRequestInfoLog(ProceedingJoinPoint proceedingJoinPoint, String businessType, Object result) {
        RequestInfoLog requestInfoLog = buildBaseRequestInfo(proceedingJoinPoint, businessType);
        if (ObjectUtils.isNotEmpty(result)) {
            requestInfoLog.setResponseResult(JSONUtil.toJsonStr(result));
        }
        return requestInfoLog;
    }

    /**
     * 构建请求日志
     *
     * @param joinPoint    切入点
     * @param businessType 业务类型
     * @param e            异常
     * @return RequestInfoLog
     */
    public RequestInfoLog buildRequestInfoErrorLog(JoinPoint joinPoint, String businessType, Exception e) {
        RequestInfoLog requestInfoLog = buildBaseRequestInfo(joinPoint, businessType);
        requestInfoLog.setErrorMsg(e.getMessage());
        requestInfoLog.setThrowExceptionClass(e.getClass().getTypeName());
        return requestInfoLog;
    }

    private RequestInfoLog buildBaseRequestInfo(JoinPoint joinPoint, String businessType) {
        HttpServletRequest httpServletRequest = HttpServletRequestUtil.getRequest();
        httpServletRequest.getMethod();
        Signature signature = joinPoint.getSignature();
        RequestInfoLog requestInfoLog = new RequestInfoLog();
        requestInfoLog.setBusinessType(businessType);
        requestInfoLog.setRequestUrl(httpServletRequest.getRequestURL().toString());
        requestInfoLog.setClassMethod(String.format("%s.%s", signature.getDeclaringTypeName(),
                signature.getName()));
        Map<String, Object> requestParameterJson = getRequestParameterJson(signature, joinPoint.getArgs());
        String jsonStr = JSONUtil.toJsonStr(requestParameterJson);
        requestInfoLog.setRequestParams(jsonStr);
        String param =  JSONObject.parseObject(jsonStr).get("param").toString();
        requestInfoLog.setOrderNo(Optional.ofNullable(JSONObject.parseObject(param).getString("orderNo")).map(String::valueOf).orElse(null));
        requestInfoLog.setCreateTime(new Date());
        String userId =
                Optional.ofNullable(httpServletRequest.getAttribute("userId")).map(String::valueOf).orElse("0");
        String userName =
                Optional.ofNullable(httpServletRequest.getAttribute("userName")).map(String::valueOf).orElse(null);
        requestInfoLog.setUserId(Integer.valueOf(userId));
        requestInfoLog.setUserName(userName);
        return requestInfoLog;
    }

    /**
     * 异常通知，拦截记录异常日志
     */
    @AfterThrowing(value = "requestLogAspect(httpRequestLog)", argNames = "joinPoint,httpRequestLog,e", throwing = "e")
    public void doAfterThrow(JoinPoint joinPoint, HttpRequestLog httpRequestLog, Exception e) {
        String businessType = httpRequestLog.value();
        RequestInfoLog requestInfoLog = buildRequestInfoErrorLog(joinPoint, businessType, e);
        SpringContextUtil.getApplicationContext().publishEvent(new RequestLogEvent(requestInfoLog));
    }


    public Map<String, Object> getRequestParameterJson(Signature signature, Object[] args) {
        MethodSignature methodSignature = (MethodSignature) signature;
        Method method = methodSignature.getMethod();
        LocalVariableTableParameterNameDiscoverer parameterNameDiscoverer = new LocalVariableTableParameterNameDiscoverer();
        String[] paramNames = parameterNameDiscoverer.getParameterNames(method);
        Map<String, Object> parameterMap = Maps.newHashMap();
        if (args != null && paramNames != null) {
            for (int i = 0; i < args.length; i++) {
                Object value = args[i];
                if (value instanceof MultipartFile) {
                    MultipartFile file = (MultipartFile) value;
                    //获取文件名
                    value = file.getOriginalFilename();
                }
                if (value instanceof ServletRequest
                        || value instanceof ServletResponse) {
                    continue;
                }
                parameterMap.put(paramNames[i], value);
            }
        }
        return parameterMap;
    }

}
